#!/usr/bin/env python
import argparse
import subprocess

def run_unittests(args, modules):
    cmd = ['python', '-munittest']
    if args.verbose:
        cmd += ['-v']
    if args.failfast:
        cmd += ['-f']
    cmd.extend(modules)
    subprocess.call(cmd)

def main():
    parser = argparse.ArgumentParser(description='Module path => module name')
    parser.add_argument('--reverse', '-r', action='store_true',
                        help='Module name => Module path')
    parser.add_argument('--run', '-m', action='store_true',
                        help='run module')
    parser.add_argument('--unittest', '-u', action='store_true',
                        help='Module path => unittest')
    parser.add_argument('--verbose', '-v', action='store_true',
                        help='unittest -v')
    parser.add_argument('--failfast', '-f', action='store_true',
                        help='unittest -f')
    parser.add_argument('--list', '-l', action='store_true',
                        help='unittest --list')
    parser.add_argument('modules', nargs='+')

    args = parser.parse_args()
    if args.reverse:
        if args.unittest:
            run_unittests(args, args.modules)
        elif args.run:
            subprocess.call(['python', '-m'] + args.modules)
        else:
            for module in args.modules:
                print(module.replace('.', '/') + '.py')
    else:
        modules = (m[2:] if m.startswith('./') else m for m in args.modules)
        modules = [m.replace('.py', '').replace('/', '.').rstrip('.') for m in modules]
        if args.list:
            cmd = 'python -m subunit.run --list %s | subunit-ls --exists'
            for module in modules:
                subprocess.call(cmd % module, shell=True)
        elif args.unittest:
            run_unittests(args, modules)
        elif args.run:
            subprocess.call(['python', '-m'] + modules)
        else:
            print('\n'.join(modules))

if __name__ == '__main__':
    main()
