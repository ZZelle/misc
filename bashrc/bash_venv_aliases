venv-flip (){
  if [[ "$1" != "" ]]; then
    if [[ -e "$1/bin/activate" ]]; then
       source $1/bin/activate
       export _virtual_env="$1"
    elif [[ -e ".tox/$1/bin/activate" ]]; then
       source .tox/$1/bin/activate
       export _virtual_env=".tox/$1"
    else
       echo $1 not a venv?
    fi
  elif [[ "$VIRTUAL_ENV" = "" ]]; then
    if [[ "$_virtual_env" != "" ]]; then
       source $_virtual_env/bin/activate
    elif [[ -e ".tox/py27/bin/activate" ]]; then
       source .tox/py27/bin/activate
       export _virtual_env=".tox/py27"
    else
       echo No venv found!
    fi
  else
    export _virtual_env="$VIRTUAL_ENV"
    deactivate
  fi
}


venv-init (){
  [[ -z ${VIRTUAL_ENV+no} ]] && return
  [[ -e modules ]] || (cd $VIRTUAL_ENV; ln -s lib/python*/site-packages modules;)
}


venv-requests-sec (){
  [[ -z ${VIRTUAL_ENV+no} ]] && return
  pip install requests[security]
}


venv-requests-ca (){
  [[ -z ${VIRTUAL_ENV+no} ]] && return
  ln -sf /etc/ssl/certs/ca-certificates.crt $(python -c 'import os.path, requests; print os.path.join(os.path.dirname(requests.__file__), "cacert.pem")')
}

venv-requests-patch (){
  [[ -z ${VIRTUAL_ENV+no} ]] && return
  patch $(python -c 'import inspect, requests.sessions; print inspect.getsourcefile(requests.sessions)') <<EOF
***************
*** 445,450 ****
--- 445,452 ----
              If Tuple, ('cert', 'key') pair.
          :rtype: requests.Response
          """
+         if 'REQUEST_REQ' in os.environ:
+             print 'REQ', method, url, verify, cert, data, dict(headers)
          # Create the Request.
          req = Request(
              method = method.upper(),
***************
*** 474,479 ****
--- 476,483 ----
          send_kwargs.update(settings)
          resp = self.send(prep, **send_kwargs)

+         if 'REQUEST_RES' in os.environ:
+             print 'RES', resp.text
          return resp

      def get(self, url, **kwargs):
EOF
}
