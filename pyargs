#!/usr/bin/python -u
import argparse
import inspect
import os
import re
import subprocess
import sys


## tools
class kdict(dict):
    @staticmethod
    def __missing__(key):
        return key

class FuncAction(argparse.Action):
    def __init__(self, *args, **kwargs):
        self.func = kwargs.pop('func', None)
        kwargs.setdefault('nargs', '*')
        kwargs['dest'] =  'actions'
        super(FuncAction, self).__init__(*args, **kwargs)
    def __call__(self, parser, namespace, values, option_string=None):
        items = getattr(namespace, self.dest, None)
        if not items:
            items = []
            setattr(namespace, self.dest, items)
        ifunc_expr = lambda c, it: self.func(values, c, it)
        items.append(ifunc_expr)

## functions
def _execute(expr_parts, context, it):
    expr = 'x = (%s)' % ' '.join(expr_parts)
    for i, x in enumerate(it):
        context.update(i=i, x=x)
        exec expr in context
        if context['x']:
            yield context['x']

def _filter(expr_parts, context, it):
    expr_parts = ('(%s) and x ' % ' '.join(expr_parts)).split(' ')
    return _execute(expr_parts, context, it)

def _print(expr_parts, context, it):
    for x in it:
        print x
        yield x

def _sh(expr_parts, context, it):
    splitteds = ' '.join(expr_parts).split(' ')
    replace_by_i = [j for j, y in enumerate(splitteds) if y == 'i']
    replace_by_x = [j for j, y in enumerate(splitteds) if y == 'x']
    for i, x in enumerate(it):
        for j in replace_by_i:
            splitteds[j] = str(i)
        for j in replace_by_x:
            splitteds[j] = x
        yield subprocess.check_output(' '.join(splitteds), shell=True).rstrip()


def parse():
    parser = argparse.ArgumentParser()
    parser.add_argument('exec_parts',      action=FuncAction, func=_execute)
    parser.add_argument('--exec',    '-x', action=FuncAction, func=_execute)
    parser.add_argument('--filter',  '-f', action=FuncAction, func=_filter)
    parser.add_argument('--sh',      '-s', action=FuncAction, func=_sh)
    parser.add_argument('--print',   '-p', action=FuncAction, func=_print, nargs=0)
    parser.add_argument('--implode', '-I', action='store_true')
    return parser.parse_args()


def run(args):
    it = (x.rstrip() for x in sys.stdin)
    if args.implode:
        for action in args.actions:
            context = kdict({k: v for k, v in globals().items() if inspect.ismodule(v)})
            it = [x for x in action(context, it) if x]
    else:
        for action in args.actions:
            context = kdict({k: v for k, v in globals().items() if inspect.ismodule(v)})
            it = action(context, it)
    for x in it:
        if x:
            print x


if __name__ == '__main__':
    args = parse()
    try:
        run(args)
    except KeyboardInterrupt as err:
        pass
