#!/usr/bin/env python
import inspect
import os
import re
import sys


def parse():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('--fast',    '-f', help='expression to allocate to r before piping')
    parser.add_argument('--begin',   '-b', help='expression to run before piping')
    parser.add_argument('--end',     '-e', help='expression to run after piping')
    parser.add_argument('--implode', '-i', help='implode piping', action="store_true")
    parser.add_argument('expr', nargs='+', help='expression to run')
    del argparse # avoid to polluate exec context
    return parser.parse_args()


def run(args):
    context = {k: v for k, v in globals().items() if inspect.ismodule(v)}
    if args.begin:
        exec args.begin in context
    elif args.fast:
        exec 'r = (%s)' % args.fast in context

    args.expr = 'r = (%s)' % ' '.join(args.expr)
    def loop():
        exec args.expr in context
        if context['r']:
            print context['r']
    try:
        if args.implode:
            context.update(x=(y.strip() for y in sys.stdin))
            loop()
        else:
            for i, x in enumerate(sys.stdin):
                context.update(i=i, x=x.strip())
                loop()
    finally:
        context.pop('i', None)
        context.pop('x', None)
        if args.end:
            exec args.end in context
        
    
if __name__ == '__main__':
    args = parse()
    run(args)
