import collections
from heapq import heappop, heappush

matrix = [
    [236,438,612,738,139,471,247,802,876,615,252,794,958,392,713,910,244,673,364,899],
    [843,980,188,956,814,386,721,828,467,212,247,713,562,430,200,357,507,562,664,857],
    [162,579,374,160,736,904,315,263,289,609,120,912,930,115,774,505,718,294,112,588],
    [864,668,917,459,325,309,125,764,313,540,519,800,685,430,834,314,851,404,254,402],
    [671,432,214,813,454,936,798,842,960,989,740,236,698,112,125,993,426,976,388,158],
    [456,405,711,630,645,169,731,355,404,691,531,430,491,143,646,601,316,746,259,166],
    [639,672,806,671,869,343,571,514,865,631,988,340,937,158,341,348,943,696,966,284],
    [294,866,245,344,648,641,515,277,516,442,958,265,656,242,310,994,478,462,454,822],
    [741,173,126,410,855,699,309,853,678,210,638,100,521,929,297,147,243,127,721,740],
    [153,927,194,276,110,600,151,304,424,468,675,118,955,503,501,367,211,227,614,346],
    [751,511,648,704,187,879,687,736,176,400,365,190,128,398,668,163,802,845,329,401],
    [708,361,333,202,606,720,314,211,804,542,356,627,262,700,995,295,189,716,514,314],
    [445,561,347,429,440,658,579,837,931,978,845,386,430,142,329,173,594,824,464,843],
    [835,745,436,795,110,777,779,674,529,441,678,678,153,610,666,554,189,805,828,499],
    [498,998,798,259,489,711,662,931,920,816,952,462,303,836,854,850,295,741,902,940],
    [307,953,280,931,197,545,422,567,276,839,514,948,402,905,189,919,885,267,432,677],
    [684,696,877,869,109,814,709,793,818,592,461,194,422,453,219,170,580,369,516,468],
    [701,761,538,385,644,701,818,566,719,611,540,311,785,463,240,264,252,679,901,623],
    [779,331,359,235,875,741,496,198,400,980,948,256,563,570,899,609,323,383,884,101],
    [890,842,986,732,324,118,840,446,733,432,531,341,177,858,593,164,765,915,210,112],
]
amatrix = [
    [10, 41, 17, 21, 12],
    [12, 42, 19, 15, 18],
    [13, 11, 15, 62, 17],
    [32, 21, 32, 47, 10],
    [43, 31, 23, 28, 11],
]
weightmap = {(x, y): v for y, vv in enumerate(matrix) for x, v in enumerate(vv)}
size = len(matrix)
last = size - 1
rr = range(size)


# Build graph
moves = [(0, -1), (0, 1), (-1, 0), (1, 0)]
edges = collections.defaultdict(list)
for x in rr:
    for y in rr:
        for dx, dy in moves:
            neigh_x = x + dx
            neigh_y = y + dy
            if neigh_x in rr and neigh_y in rr:
                neigh = neigh_x, neigh_y
                edge = weightmap[neigh], neigh
                edges[x, y].append(edge)


# Unwrap path
def unwrap(rawpath):
    path = []
    while 1:
        rawpath, tail = rawpath
        path.insert(0, tail)
        if not rawpath:
            return path
        

# Find shortest path
def dijkstra(edges, src, dst):
    heap = []
    seens = set()
    heappush(heap, (weightmap[src], src, ()))
    while heap:
        weight, node, path = heappop(heap)
        if node not in seens:
            path = (path , node)
            if node == dst:
                return weight, unwrap(path)

            seens.add(node)
            for dweight, neigh in edges[node]:
                if neigh not in seens:
                    heappush(heap, (weight + dweight, neigh, path))


a, a_path = dijkstra(edges, (0, 0), (last, last))
b, b_path = dijkstra(edges, (0, last), (last, 0))
common_nodes = set(a_path).intersection(b_path)
c = len(common_nodes)
d = sum(weightmap[x] for x in common_nodes)
print a, b ,c, d
one = (d * a + c / 2) % 1000
two = (d * b + c) % 1000
print "N48 46.%s" % one
print "E 2 10.%s" % two

