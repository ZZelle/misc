#!/usr/bin/env python
import collections
import os
import re
import subprocess


def get_filemap_path():
    gitdir = subprocess.check_output(['git', 'rev-parse', '--git-dir']).strip()
    return os.path.join(gitdir, 'filemap')


def get_filemap():
    try:
        with open(get_filemap_path()) as f:
            return {str(k): v for k, v in enumerate(l.strip() for l in f) if k}
    except IOError:
        return dict()


def set_filemap(files):
    with open(get_filemap_path(), 'w') as f:
        f.write('\n')
        for file in files:
           f.write(file + '\n')
    return get_filemap()

def generate_filemap():
    output = subprocess.check_output(['git', 'status', '--short'])
    work = (x.strip().split(' ') for x in output.splitlines())
    return set_filemap(x[-1] for x in work if len(x) == 2)

        
pattern = re.compile('([0-9]+)-([0-9]+)$')
def replace_with_filemap(filemap, *strings):
    for cursor in strings:
       matched = pattern.match(cursor)
       if not matched:
           yield filemap.get(cursor, cursor)
       start, end = [int(x) for x in matched.groups()]
       sign = -1 if start > end else 1
       for x in xrange(start, end + sign, sign):
           x = str(x)
           yield filemap.get(x, x)


def rewrite_git_status(*args):
    filetuple = generate_filemap().items()
    filetuple += [(k, '#\t'+v) for k, v in filetuple]
    output = subprocess.check_output(['git', 'status'] + list(args))
    for l in output.splitlines():
        ll  = l.split(' ')
        for k, v in filetuple:
            if v in ll:
                lll = list(ll[0])
                lll[1:1] = [k]
                ll[0] = ''.join(lll)
                break
        yield ' '.join(ll)
